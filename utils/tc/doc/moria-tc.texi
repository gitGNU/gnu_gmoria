\input texinfo @c -*-texinfo-*-
@c This file uses the @command command introduced in Texinfo 4.0.
@c %**start of header
@setfilename moria-tc.info
@settitle Treasure Compiler for gmoria
@finalout
@setchapternewpage odd
@c %**end of header

@include package.texi


@ifinfo
This file documents the @command{moria-tc} software

Copyright (C) 2007, 2014 Ben Asselstine

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end ifinfo

@titlepage
@title tc
@subtitle The Treasure-Compiler for gmoria
@subtitle Version @value{VERSION}
@author by Ben Asselstine

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2007, 2014 Ben Asselstine

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end titlepage

@contents

@node Top, The Treasure-Definition File, (dir), (dir)
@chapter Overview
@cindex greetings
@cindex overview

This document describes the treasure-compiler (@emph{tc}).  It is a code-generation tool that is used to create files called treasure_tables.c and treasure_constant.h in gmoria.  Editing those files by hand can be error prone, and @emph{tc} creates those files so you don't have to bother.  It reads in a single human-readable file that completely describes the attributes of all of the objects in the game, and it generates code to be compiled into the game.  The compiler issues warnings and errors when things don't quite make sense.  The audience for this tool is a developer who wants to add new objects to the game in a safe way.  This document describes how to use this tool, and the format of the treasure-definition file.  Objects in the game are called `treasure' for historical reasons only.  Treasures include things that can be picked up, but they can also be dynamic elements of the dungeon, like doors or traps.  Treasures include everything that can be seen in the game that isn't a monster or a wall.

@menu
* The Treasure-Definition File::About @command{moria-tc}'s input file.
* A Small Example::		See it in action.
* Invoking tc::			How to run @command{moria-tc}.
* Workflow::			Where @command{moria-tc} fits in.
* Contributors::		Who to thank (profusely).
* Problems::                    Reporting bugs.
@end menu

@node The Treasure-Definition File, Class Blocks, Top, Top
@chapter The Treasure-Defintion File

The treasure-definition file describes all of the objects in the game.  @emph{tc} reads in this file to create the treasure_tables.c and treasure_constant.h files.  It is meant to be human-readable, easily understood and modified by programmers who might not understand the intricacies of how the various arrays and constants fit together. 

The treasure-definition file is comprised of blocks.  A block looks like this:

@verbatim
treasure "& Longsword" {
	...
};
@end verbatim

As can be seen, the block starts with a keyword denoting the kind of block (a treasure block).  Following that there's a name for the block (@samp{"& Longsword"}), and then there are a set of braces, followed by a semicolon.  The attributes of the longsword object go inside of the braces (instead of @samp{...}) .  For more information about the purpose of the @samp{&} see @ref{Treasure Blocks}.

There are four kinds of blocks: treasure, class, unidentified, and syllable blocks.  A treasure can be derived from a class.  A class block looks like:

@verbatim
class sword {
	...
};
@end verbatim

It is very similar to the treasure block.  The name isn't quoted because the name of the class will not show up anywhere in the treasure_tables.c file.  The attributes that go inside of a class block are the same as the treasure block.  

Unidentified blocks have to do with naming objects when their function is not fully known.  For example, potions can be "Blue", or "Speckled".  Syllable blocks are another kind of unidentified block that pertain solely to scrolls.  Names of unidentified scrolls are made up of a random set of syllables from this block.  The unidentified block, and the syllable block are a simple list of words.

The treasure-definition file is made up of sequences of these class and treasure blocks, along with unidentified and syllable blocks.  A complete treasure-defintion file contains many treasures, that derive from many classes which derive from many classes.  The use of classes help to reduce errors, and increase consistency in the final product.  Using a complex structure of classes makes changing the treasure-definition file more difficult; a good treasure-definition file strikes a balance.

The treasure compiler will provide error messaging when a class is referenced that doesn't exist or if there is a synatical problem like a missing semi-colon.  It will also complain if an important attribute is forgotten.

Hash style comments are also supported when they are located outside of a block.

@menu
* Class Blocks::		Detailed information on class blocks.
* Treasure Blocks::		Detailed information on treasure blocks.
* Unidentified Blocks::		Detailed information on unidentified blocks.
* Syllable Blocks::		Detailed information on syllable blocks.
* Attributes::			Detailed information on supported attributes.
* Deriving Attributes::		What to watch out for when deriving attributes.
@end menu


@node Class Blocks, Treasure Blocks, The Treasure-Definition File, The Treasure-Definition File
@section Class Blocks

Class blocks are used by treasure blocks to derive attributes.  For example all sword treasure blocks share a sword class that make them "sword-like".

A treasure is derived from a class like this:

@verbatim
treasure "& Longsword": sword {
	...
};
@end verbatim

A class can be derived from zero or more classes.  For example:

@verbatim
class sword: wieldable {
	...
};
@end verbatim

All of the attributes contained in the wieldable class will be pulled into the sword class.

@node Treasure Blocks, Unidentified Blocks, Class Blocks, The Treasure-Definition File
@section Treasure Blocks

Treasure blocks are the most important block, and they relate directly to the treasure_tables.c file.  There is an "Amulet of DOOM" in the game because there is a treasure block in the treasure-defintion file that defines it.

A treasure block can derive from zero or more class blocks.  For example:

@verbatim
treasure "DOOM": amulet, wearable {
	...
};
@end verbatim

All of the attributes from the @samp{amulet} and @samp{wearable} class will be present in this treasure called @samp{DOOM}.  The name @samp{DOOM} will appear in the game when the player looks at the treasure.  Notice that the name of the treasure isn't @samp{Amulet of DOOM} -- it's "amuletness" is defined by an attribute in a block which isn't shown in this example.

The name of a treasure block has some special rules.  If it contains an @samp{&}, it is replaced with @samp{A}, @samp{An}, or a number.  If it contains a @samp{~} it is replaced with an @samp{s} to make a word plural.  For example @samp{& Bolt~} becomes @samp{a Bolt} or @samp{15 Bolts} according to how many bolts there are associated with the object (the @samp{quantity} attribute).
For objects like amulets, rings, wands, scrolls, potions, mushrooms, books and staffs the name is automatically prepended with @samp{Amulet of}, or @samp{Ring of}, or @samp{Staff of}.  The name of the treasure block should be chosen with these rules in mind.

The game expects certain treasure blocks to be present to fill the character's initial backpack with.  Different character classes will receive different items in their backpack.  These are the treasure blocks that must be present:
@table @emph
@item Rations of Food
An item with a tval of @samp{TV_FOOD}, and a subval of @samp{90} that is sold in a store. 
@item Wooden Torches
An item with a tval of @samp{TV_LIGHT}, and a subval of @samp{192} that is sold in a store. 
@item Cloak
An item with a tval of @samp{TV_CLOAK}, and a subval of @samp{1} that is not sold in a store. 
@item Stilleto Dagger
An item with a tval of @samp{TV_SWORD}, and a subval of @samp{3} that is not sold in a store. 
@item Soft Leather Armor
An item with a tval of @samp{TV_SOFT_ARMOR}, and a subval of @samp{2} that is not sold in a store. 
@item Beginners Magic Book
An item with a tval of @samp{TV_MAGIC_BOOK}, and a subval of @samp{64} that is not sold in a store. 
@item Beginner's Handbook
An item with a tval of @samp{TV_PRAYER_BOOK}, and a subval of @samp{64} that is not sold in a store. 
@end table

@node Unidentified Blocks, Syllable Blocks, Treasure Blocks, The Treasure-Definition File
@section Unidentified Blocks

Various objects in the game have special descriptive terms attached to them when their function is unknown.  For example, who knows what a "Blue Speckled" potion does?  It may be a potion of Cure Poison but because it is still "unidentified" the potion needs a descriptive term to uniquely identify it's effect.  To make things a little more complicated, a "Blue Speckled" potion isn't always a potion of Cure Poison -- it is randomly set every game.  Various kinds of objects need a special description when unidentified: @samp{RING}, @samp{WAND}, @samp{STAFF}, @samp{MUSHROOM}, and @samp{POTION}.  This is why the @samp{unidentified} block exists: to describe these objects when their function is unknown.

When there are more words in the unidentified block than of objects of that type, the word may not be used in the game.  It is randomly decided which of the descriptive words will be used per game.

Here's what the unidentified block looks like:

@verbatim
unidentified AMULET {
  "Amber","Driftwood","Coral","Agate","Ivory","Obsidian",
  "Bone","Brass","Bronze","Pewter","Tortoise Shell"
};
@end verbatim

This means that an unidentified amulet object can be one of Amber, Driftwood, Coral, etc.  There must be one entry in this @samp{unidentified} block per @samp{AMULET} described in the @samp{treasure} blocks.  If there were only 10 treasure blocks with a @samp{kind} of @samp{AMULET}, then one of these amulet adjectives would unassigned.

@node Syllable Blocks, Attributes, Unidentified Blocks, The Treasure-Definition File
@section Syllable Blocks

During gameplay when the function of @samp{SCROLL} objects is unknown they are identified by a name that is comprised of a random jumble of syllables.  The @samp{syllable} block describes these syllables.

The syllable block looks like this:
@verbatim
syllable {
  "a","ab","ag","aks","ala","an","ankh","app","arg","arze","ash","aus",
  "ban","bar","bat","bek","bie","bin","bit","bjor","blu","bot","bu",
  "byt","comp","con","cos","cre","dalf","dan","den","doe","dok","eep",
  "el","eng","er","ere","erk","esh","evs","fa","fid","for","fri","fu",
  "gan","gar","glen","gop","gre","ha","he","hyd","i","ing","ion","ip",
  "ish","it","ite","iv","jo","kho","kli","klis","la","lech","man","mar",
  "me","mi","mic","mik","mon","mung","mur","nej","nelg","nep","ner",
  "nes","nis","nih","nin","o","od","ood","org","orn","ox","oxy","pay",
  "pet","ple","plu","po","pot","prok","re","rea","rhov","ri","ro","rog",
  "rok","rol","sa","san","sat","see","sef","seh","shu","ski","sna","sne",
  "snik","sno","so","sol","sri","sta","sun","ta","tab","tem","ther","ti",
  "tox","trol","tue","turs","u","ulk","um","un","uni","ur","val","viv",
  "vly","vom","wah","wed","werg","wex","whon","wun","x","yerg","yp","zun"
};
@end verbatim

There is no limit to the number syllables.


@node Attributes, Deriving Attributes, Syllable Blocks, The Treasure-Definition File
@section Attributes
Every treasure in moria is made up of a set of attributes.  Every treasure and class block in the treasure-definition file describes attributes.  

Attributes have a name, and a value, and are always followed by a semicolon.  For example:

@verbatim
class sword {
	to_ac: 0;
	   ac: 0;
}
@end verbatim

The @samp{to_ac} and @samp{ac} attributes are set to a value of 0 (because swords do not commonly increase the armor class of the wearer).  The semicolon must follow each attribute value, or the compiler be unable to parse the file due to a syntax error.

Attributes fall into two categories: general and specific.  Specific attributes pertain to an object with a particular @samp{kind}, while general attributes apply to all @samp{KIND}s.  

The general attributes that apply to all @samp{treasure} and @samp{class} blocks are: @samp{kind}, @samp{letter}, @samp{p1}, @samp{cost}, @samp{quantity}, @samp{weight}, @samp{to_hit}, @samp{to_dam}, @samp{ac}, @samp{to_ac}, @samp{damage}, @samp{level}, @samp{stackable}, @samp{sold}, @samp{relsubval}, and @samp{subval}.  

The specific attributes are: @samp{special}, @samp{spell}, @samp{prayer}, @samp{unique_function},  @samp{potion_causes}, @samp{eating_causes}, @samp{staff_casts}, @samp{scroll_casts}, @samp{wand_casts}, and @samp{contains}.  

Here is an explanation of these attributes -- what they do, and what their allowable values are: 

@table @samp
@item kind
  This attribute is the genre of the object.  The following values are allowed for this attribute:
@table @samp
    @item NOTHING
An administrative item kind.  It doesn't do anything at all.
    @item MISC
A useless item in the game that can be picked up, dropped or thrown.
    @item CHEST
An item that may contain other objects.  Chests may be trapped.
    @item SLING_AMMO
A small object that can be thrown via sling.  It can be fired from certain @samp{BOW}s.
    @item BOLT
A small object that can be shot with a crossbow.  It can be fired from certain @samp{BOW}s.
    @item ARROW
A small object that can be shot with a @samp{bow}.
    @item SPIKE
A small object that can be used to jam a door to make it unopenable.  After the spike is jammed, it is consumed (it disappears).
    @item LIGHT
An item that provides light when wielded.
    @item BOW
A weapon that shoots arrows when wielded.
    @item HAFTED
An axe-like weapon that be used to hit monsters when wielded.
    @item POLEARM
A longer spear-like weapon that be used to hit monsters when wielded.
    @item SWORD
A bladed weapon that be used to hit monsters when wielded.
    @item DIGGING
A shovel-like object that can be wielded to dig in walls for ore.
    @item BOOTS
An object that is wearable on the feet.
    @item GLOVES
An object that is wearable on the hands.
    @item CLOAK
An object that is wearable around the shoulders.
    @item HELM
An object that is wearable on the head.
    @item SHIELD
An object that is wearable on an arm.
    @item SOFT_ARMOR
An object that is wearable on the body.  
    @item HARD_ARMOR
An object that is wearable on the body.  It is heavier and more protective than it's softer counterpart.
    @item AMULET
An object wearable around the neck that usually has magical abilities.
    @item RING
An object wearable around a finger that usually has magical abilities.
    @item STAFF
An object that is used to do a variety of magical things.  It has so-called @emph{charges} that are consumed as the player uses the staff.
    @item WAND
An object that is used to do a variety of magical things.  It has charges that are consumed as the player uses the wand.  The effect of this object happens in a given direction.
    @item SCROLL
An object that is read to do a variety of magical things.  After the scroll is read, it is consumed (it disappears).
    @item POTION
An object that is quaffed and has a variety of magical effects.  The empty potion disappears after it is consumed.
    @item FLASK
An object that fuels a light source.  The empty flask disappears after it is consumed.
    @item FOOD
An object that is eaten.
    @item MUSHROOM
An object that is eaten, but usually has magical properties.
    @item MAGIC_BOOK
An object that contains spells, and is readable to cast spells.
    @item PRAYER_BOOK
An object that contains prayers, and is readable to pray prayers.
    @item GOLD
Currency.
    @item INVIS_TRAP
A feature of the terrain, a trap that can't normally be seen until it is stepped on.
    @item VIS_TRAP
A feature of the terrain, a trap that is plainly visible.
    @item RUBBLE
A feature of the terrain, some loose rock lying about.
    @item OPEN_DOOR
A feature of the terrain, a door that is open.
    @item CLOSED_DOOR
A feature of the terrain, a door that is closed.
    @item UP_STAIRS
A feature of the terrain, some stairs going upwards.
    @item DOWN_STAIRS
A feature of the terrain, some stairs going downwards.
    @item SECRET_DOOR
A feature of the terrain, a closed door that is not plainly visible.
    @item STORE_DOOR
A feature of the terrain in the town, a door corresponding to a store.
@end table
The @samp{kind} attribute is used like this:
@verbatim
class ring {
	kind: RING;
};
@end verbatim

@item letter
This attribute represents the ascii character that the treasure appears on the screen as.  This value is a string, where the first character in that string is the character used to represent the treasure onscreen.  Letters like @samp{#} and @samp{"} are incorrectly handled, and must be specified numerically with the decimal value.  For example instead of @samp{letter: "#";}, use @samp{letter: 35;}.

In most cases, the letter attribute is used like this:
@verbatim
class ring {
	letter: "=";
};
@end verbatim
@item p1
This attribute has different meanings when it used with objects of differing @samp{kind}s.  Here is what @samp{p1} means per @samp{kind}:

@table @samp
@item FOOD
@samp{p1} means the number of turns the player will go without feeling hungry after eating this object.
@item MUSHROOM
@samp{p1} means the number of turns the player will go without feeling hungry after eating the mushroom.
@item FLASK
@samp{p1} means the number of turns of light the flask holds.
@item LIGHT
@samp{p1} means the number of turns of light the object holds initially.
@item DIGGING
@samp{p1} determines how effective the digging tool is.  Legal values are 1, 2, and 3, with 3 being the most effective digging tool.
@item POTION
@samp{p1} means the number of turns the player will go without feeling hungry after quaffing the potion.
@item BOW
@samp{p1} can be any value from 1 to 6, and it relates to a bonus that the object gets when used with the proper ammunition.
@table @samp
@item 1
The bow shoots @samp{SLING_AMMO}.
@item 2
The bow shoots @samp{ARROW}s with a small bonus.
@item 3
The bow shoots @samp{ARROW}s with a medium bonus.
@item 4
The bow shoots @samp{ARROW}s with an large bonus.
@item 5
The bow shoots @samp{ARROW}s with the largest bonus.
@item 6
The crossbow shoots @samp{BOLT}s with a medium bonus.
@item 7
The crossbow shoots @samp{BOLT}s with the largest bonus.
@end table
@item VIS_TRAP
@samp{p1} represents the amount of experience the player gets after disarming the trap.
@item INVIS_TRAP
@samp{p1} represents the amount of experience the player gets after disarming the trap.
@end table

@item ac
This attribute represents the armour class of the object.  The higher the armour class, the harder it is for a creature to hit the player when the player is wearing this armour.  A legal value for this attribute is @samp{0} or more, where the largest practical value is @samp{125}.
@verbatim
class shield {
	ac: 60;
};
@end verbatim
@item cost
This attribute represents the intrinsic value of the object in gold pieces.  A store owner will buy the object from the player for a fraction of this value (unless it is cursed).  A legal value for this attribute is @samp{0} or more.
@item quantity
This attribute represents the number of objects.  Having a quantity greater than @samp{1} is useful for giving the new characters a specific number of torches, or rations of food at the beginning of a new game.  Theoretically this attribute is useful for putting things in the dungeon that are stackable, and come in pairs, or threes, etc.  A legal value for this attribute is @samp{0} or more.
@item weight
This attribute represents how heavy the object is (in tenths of stones).  One stone is about 14 pounds.  A legal value for this attribute is @samp{0} or more.  Here is an example of how to use the @samp{weight} attribute:
@verbatim
class weighs_one_stone {
	weight: 10;
};
@end verbatim
@item damage
This attribute has two terms.  The first is the number of dice to roll, and the second term is the number of sides that the die has.  When a die is said to have 3 sides, it is presumed that one side has a value of 1, another has 2, and the last has 3.  These fictious dice are rolled and the value is the base amount to subtract from a monster's hit-points.  The @samp{to_dam} attribute can be used to augment this total with a fixed amount.
For example:
@verbatim
class no_damage {
	damage: 0|0;
};
@end verbatim
or:
@verbatim
class hits_for_7_to_21_damage{
	damage: 7|3;
};
@end verbatim
@item to_hit
A fixed bonus to the likelihood that this object will hit it's target.  A legal value for this attribute is @samp{0} or more.
This attribute applies mostly to weapons, but not exclusively.
@item to_dam
A fixed bonus to the damage of the object.  A legal value for this attribute is @samp{0} or more.
This attribute applies mostly to weapons, but not exclusively.
For example:
@verbatim
class hits_for_22_to_36_damage{
	damage: 7|3;
        to_dam: 15;
};
@end verbatim
@item to_ac
A fixed bonus to the object's armor class.
@item level
The level of the dungeon that this object is most frequently found at.  A level of @samp{0} means the town level, a level of @samp{1} means 50 feet below into the dungeon, level @samp{2} means 100 feet, etc.
Here's an example of how the @samp{level} attribute is used:
@verbatim
class commomly_found_at_1250_feet_below {
	level: 25;
};
@end verbatim
@item stackable
This attribute indicates the stacking policy of the object.  It can be one of the following values: @samp{never}, @samp{with_same_kind}, or @samp{with_same_p1}.
This attribute assists in the autonumbering of @samp{subval} attribute when @samp{subval} is not specified.

Stacking means the objects are gathered on one line in the player's inventory.
Objects that @samp{never} stack are things like swords, and boots.  It is impossible to merge a sword with another sword of the same kind; one sword will always occupy one slot in the player's inventory, while two swords will take up two slots.

Objects that stack @samp{with_same_kind} are things like potions, and mushrooms.  This means that all the potions of sleep that the player happens to find will be put in a single pile in the player's inventory.  e.g. @samp{8 Potions of Sleep}.

Things that stack @samp{with_same_p1} are things like arrows, and bolts.  This is so that @samp{+3} arrows don't get mixed in to the normal arrows.

@item relsubval
It is not always desired to implicitly increment the subval by 1, so there is a way to explicitly set the subval relative to the stackable policy.  This is done by specifying the @samp{relsubval} attribute.  The idea here is better than absolutely specifying the @samp{subval} by specifying it because there's no easy way to know ahead of time what the first subval for @samp{with_same_kind} or @samp{with_same_p1} will be.  If the @samp{with_same_kind} attribute starts numbering at 64, the subval is relatively specified as @samp{relsubval: 3}, the subval would become 64 + 3 = 67.

@item subval
The @samp{subval} attribute is used to enumerate different objects of the same @samp{kind}.  Unforunately the gmoria source expects particular values for @samp{subval}s for various @samp{kind}s.  The user of this tool must be very careful when changing subvals -- it is possible that other source code must be changed to make the game function.

When @samp{subval} is not specified the compiler will try to autonumber it -- picking the next available subval, or taking an existing subval if the object has the same name.
@item sold
This attribute indicates which stores an object is sold in, and how frequently it is available for sale.
It can be a combination of the following: @samp{by_general_store}, @samp{by_armoury}, @samp{by_weaponsmith}, @samp{by_temple}, @samp{by_alchemist}, @samp{by_magic_shop}, and @samp{exclusively_in_town}.  The value @samp{exclusively_in_town} indicates that this object never appears randomly in the dungeon, and is only for sale in a store.  The other values indicate which store sells this object.  To make the object appear in a General Store more frequently, the value would be @samp{by_general_store*2}, @samp{by_general_store*3}, etc.  The multiplier indicates that the object is 2 times more likely, 3 times more likely, etc. to appear for sale in the General Store.

Here's a complicated example for a @samp{Word-of-Recall} scroll:
@samp{sold: by_temple, by_alchemist*3, exclusively_in_town;}
It is sold in the temple, and in the alchemist's store, and it is not found within the dungeon randomly.  The scroll is found three times more often in the Alchemist's store than it would if it were only @samp{*1}.

An unexpected requirement is that the total number of items for sale in each store must be equal.  For example, if the general store only sells rations, and every other store sells precisely three different items, the rations must appear as @samp{sold: by_general_store*3}.

Please note that @samp{exclusively_in_town}, is a misnomer -- an object can be said to be sold exclusively in town, but not sold in a store.  This is because the value actually means that it will not randomly show up in the dungeon.

@item special
This attribute applies to objects that have a @samp{kind} of @samp{AMULET}, @samp{DIGGING}, and @samp{RING}.  It is used to apply various special abilities to amulets, shovels and rings.

@samp{special} can have any combination of the following values:
@table @samp
@item strength
Gives the wearer a strength bonus.
@item intelligence
Gives a bonus to the wearer's intelligence.
@item wisdom
Gives a bonus to the wearer's wisdom.
@item dexterity
Gives a bonus to the wearer's dexterity.
@item constitution
Gives a bonus to the wearer's constitution.
@item charisma
Gives a bonus to the wearer's charisma.
@item search
Causes the wearer to find hidden doors and traps more often.
@item slow_digestion
Causes the wearer to get hungry less often.
@item stealth
Causes the wearer to wake up sleeping monsters less often.
@item aggravate
Causes the wearer to wake up sleeping monsters more often.
@item teleport
Causes the wearer to be randomly transported to another place on the map.
@item regenerate
Causes the wearer to slowly gain hit-points when injured.
@item speed
Causes the wearer to move faster.
@item ego_flame_tongue
This value is used with @samp{FLASK} objects.  When the object is thrown onto a fire-based monster, it does extra damage.
@item resist_fire
Causes the wearer to be less affected by fire attacks.
@item resist_acid
Causes the wearer to be less affected by acid attacks.
@item resist_cold
Causes the wearer to be less affected by cold/ice attacks.
@item sustain_stat
Causes the wearer to have strength, intelligence, dexterity, wisdom, charisma, or constitution remain the same.
@item free_action
Makes the wearer unable to be slept, paralyzed, or made afraid.
@item see_invisible
Causes the wearer the ability see invisible monsters.
@item resist_lightning
Causes the wearer to be less affected by lightning attacks.
@item free_falling
Gives the wearer the ability to gracefully float down into any unexpected holes in the dungeon floor.
@item blindness
Causes the wearer to become blind.
@item fear
Causes the wearer to become afaid.
@item tunnel
This gives @samp{DIGGING} objects their ability to tunnel through rock.
@item infrared
Gives the wearer the ability see into the darkness.
@item cursed
Causes the wearer to be unable to take the item off.
@end table

Here is an example of how to use @samp{special}:
@verbatim
class perfect_sight {
	special: infrared, see_invisible, search;
};
@end verbatim
It is also possible to negate a special if it has already been defined by another inherited class:
@verbatim
class not_blind {
	special: ~blindness;
};
@end verbatim
@item spell
This attribute applies to objects that have a @samp{kind} of @samp{MAGIC_BOOK}.  The idea here is that the book contains a number of different spells.
It can be any combination of the following values:
@table @samp
@item magic_missile
This spell throws a magical arrow at a target.
@item detect_monsters
This spell shows the player where the monsters are, but only for an instant.
@item phase_door
This spell transports the player to a nearby location.
@item light_area
This spell provides light to open spaces.
@item cure_light_wounds
This spell restores some of the player's hit-points.
@item find_hidden_traps_and_doors
This spell shows the player where invisible traps and secret doors are.
@item stinking_cloud
This spell throws a ball of nausea at a group of opponents.
@item confusion
This spell causes a monster to become confused temporarily.
@item lightning_bolt
This spell throws a lightning bolt at a target.
@item trap_and_door_destruction
This spell makes traps and doors disappear.
@item sleep_i
This spell makes a group of creatures fall asleep.
@item cure_poison
This spell negates the effects of poison.
@item teleport_self
This spell works like phase door, but transports the player farther away.
@item remove_curse
This spell makes it possible to take off a cursed object.
@item frost_bolt
This spell throws an arrow of magical ice at a target.
@item turn_stone_to_mud
This spell dissolves walls and rock-based creatures.
@item create_food
This spell creates food.  See the @samp{created_by_spell} value of the @samp{unique_function} attribute for which foodstuff is created.
@item recharge_item_i
This spell reloads staffs and wands, but has a chance of destroying the item.
@item sleep_ii
This spell makes a group of creatures fall asleep.  It is more effective than @samp{sleep}.
@item polymorph_other
This spell turns a creature into another creature.
@item identify
This spell assists the player in discovering the true nature of an object.
@item sleep_iii
This spell makes a group of creatures fall asleep.  It is more effective than @samp{sleep_ii}.
@item fire_bolt
This spell throws a magical arrow of fire at a target.
@item slow_monster
This spell makes a monster move a little slower.
@item frost_ball
This spell throws a ball of ice at a group of opponents.
@item recharge_item_ii
This spell reloads staffs and wands, but has a chance of destroying the item.  It is more effective than @samp{recharge_item_i}.
@item teleport_other
This spell works like @samp{teleport_self}, but operates on another creature.
@item haste_self
This spell makes the player move a little faster.
@item fire_ball
This spell throws a ball of fire at a group of opponents.
@item resist_poison_gas
This spell gives a permanent, non-cumulative small resistance to poison gas.
@item word_of_destruction
This spell destroys everything on the screen.
@item genocide
This spell destroys all creatures of a given appearance on the level.
@end table

@item prayer
This attribute applies to objects that have a @samp{kind} of @samp{PRAYER_BOOK}.  It can be any combination of the following values:
@table @samp
@item detect_evil
This prayer shows the player all the evil creatures on the screen, but only for an instant.
@item cure_light_wounds
This prayer cures a small number of the player's hit-points. 
@item bless
This prayer improves ther player's armor class and fighting ability for a short period of time. 
@item remove_fear
This prayer negates the effects of fear on the player.
@item call_light
This prayer negates darkness in an open space.
@item find_traps
This prayer shows the player all of the invisible traps on the screen.
@item detect_doors_and_stairs
This prayer shows the player all of the doors and stairs on the screen.
@item slow_poison
This prayer lessens the effects of poison, but does not cure it.
@item blind_creature
This prayer causes a creature to lose it's sight.
@item portal
This prayer transports the player to a nearby location.
@item cure_medium_wounds
This prayer cures a medium number of the player's hit-points. 
@item chant
This prayer improves the player's armor class and fighting ability for a medium period of time. 
@item sanctuary
This prayer causes neighbouring monsters to fall asleep for a while. 
@item create_food
This prayer creates food.  See the @samp{created_by_spell} value of the @samp{unique_function} attribute for which foodstuff is created.
@item remove_curse
This prayer makes it possible to take off a cursed object.
@item resist_heat_and_cold
This prayer lessens the effects of heat and cold attacks on the player.
@item neutralize_poison
This prayer cures the effects of poison.
@item orb_of_draining
This prayer drains experience from a creature.
@item cure_serious_wounds
This prayer cures a large number of the player's hit-points. 
@item sense_invisible
This prayer shows the player all of the invisible creatures on the screen.
@item protection_from_evil
This prayer lessens the attacks of evil characters on the player.
@item earthquake
This prayer rents the earth and collapses the ceiling.
@item sense_surroundings
This prayer shows the walls on the screen.
@item cure_critical_wounds
This prayer cures a very large number of the player's hit-points. 
@item turn_undead
This prayer attempts to make undead creatures flee the player.
@item pray_prayer
This prayer improves the player's armor class and fighting ability for a long period of time. 
@item dispel_undead
This prayer attempts to utterly destroy an undead creature.
@item heal
This prayer restores up to 200 of the player's hit-points.
@item dispel_evil
This prayer attempts to utterly destroy an evil creature.
@item resist_poison_gas
This prayer gives a permanent, non-cumulative small resistance to poison gas.
@item glyph_of_warding
This prayer leaves a 'Glyph' on the ground that creatures cann't pass over.  See the @samp{scare_monster} value of the @samp{unique_function} attribute for which object is dropped on the ground.
@item holy_word
This prayer dispels evil, removes fear, cures poison, restores 1000 HPs, restores all stats, and invulnerability for 3 turns.
@end table
@item unique_function
This attribute gives an object a unique behaviour.  It can be one of the following values:
@table @samp
@item chest_ruined
This value indicates that this object is left behind after a chest is bashed.
@item wizard_object
This value indicates that it is used as a base object when creating new objects in wizard mode.
@item scare_monster
This value indicates that this object is left on the ground after a @samp{glyph_of_warding} prayer or @samp{warding_glyph} scroll is read.
@item created_by_spell
This value indicates that this object is created by a @samp{create_food} spell or prayer.
@item inventory_object
This value indicates that the object is administrative in nature, and is used as a necessary placeholder in the player's inventory.
@end table
@item potion_causes
This attribute applies to objects that have a @samp{kind} of @samp{POTION}.  It can have one of the following values:
@table @samp
@item gain_strength
Causes the player's strength stat to increase.
@item lose_strength
Causes the player's strength stat to descrease.
@item restore_strength
Causes the player's strength stat to return to a normal level.
@item gain_intelligence
Causes the player's intelligence stat to increase.
@item lose_intelligence
Causes the player's intelligence stat to descrease.
@item restore_intelligence
Causes the player's intelligence stat to return to a normal level.
@item gain_wisdom
Causes the player's wisdom stat to increase.
@item lose_wisdom
Causes the player's wisdom stat to descrease.
@item restore_wisdom
Causes the player's wisdom stat to return to a normal level.
@item gain_charisma
Causes the player's charisma stat to increase.
@item lose_charisma
Causes the player's charisma stat to descrease.
@item restore_charisma
Causes the player's charisma stat to return to a normal level.
@item cure_wounds_i
Restores a small number of the player's hit-points. 
@item cure_wounds_ii
Restores a medium number of the player's hit-points. 
@item cure_wounds_iii
Restores a large number of the player's hit-points. 
@item healing
Restores up to 1000 of the player's hit-points. 
@item gain_constitution
Causes the player's constitution stat to increase.
@item gain_experience
Causes the player to gain experience, and possibly a level.
@item sleep
Puts the player into a deep sleep.
@item blindness
Makes the player unable to see anything at all.  Reading from scrolls or books is impossible.
@item confusion
Makes the player act erradically.
@item poisoning
Causes the player's hit-points to steadily decrease.
@item speed
Makes the player move faster for a temporary amount of time.
@item slowness
Makes the player move slower for a temporary amount of time.
@item gain_dexterity
Causes the player's dexterity stat to increase.
@item restore_dexterity
Causes the player's dexterity stat to return to a normal level.
@item restore_constitution
Causes the player's constitution stat to return to a normal level.
@item cure_blindness
Negates the effects of blindness when the player is blind.
@item cure_confusion
Negates the effects of confusion when the player is confused.
@item cure_poison
Completely negates the effects of poison when the player is poisoned.
@item lose_experience
Causes the player to lose experience points, and maybe lose a level.
@item throw_up
Causes the player to throw up!  The potion cures poison and the player becomes hungry sooner.
@item invulnerability
Negates the effects of attacks on the player for a temporary period of time.
@item heroism
Causes the player temporarily receive more hit-points and become a better fighter.
@item super_heroism
Causes the player temporarily receive more hit-points and become a better fighter.  More effective than @samp{heroism}.
@item cure_fear
Negates the effects of fear when the player is afraid.
@item restore_life_levels
Causes the player experience points to be restored to a normal level.
@item resist_heat
Lessens the effect of fire attacks on the player.
@item resist_cold
Lessens the effect of cold attacks on the player.
@item see_invisible
Causes the player to be able to see invisible creatures for a short amount of time.
@item slow_poison
Lessens the effects of poison when the player is poisoned.
@item cure_poison
Completely negates the effects of poison when the player is poisoned.
@item restore_mana
Restores the player's magic points.
@item infravision
Causes the player to see creatures farther into the darkness.
@end table

@item eating_causes
This attribute applies to objects that have a @samp{kind} of @samp{MUSHROOM}.  It can have one of the following values.  These objects can also be thrown at a creature and the effect happens to the creature, instead of the player.
@table @samp
@item poisoning
Causes the player's hit-points to steadily decrease for a temporary amount of time.
@item blindness
Causes the player to become blind for a temporary period of time.
@item fear
Causes the player to become afraid for a temporary period of time.
@item confusion_i
Causes the player to act erradically for a temporary period of time.
@item confusion_ii
Causes the player to act more erradically for a longer period of time.  
@item cure_poison
Negates the effects of poison when the player is poisoned.
@item cure_blindness
Negates the effects of blindness when the player is blinded.
@item cure_fear
Negates the effects of fear when the player is afraid.
@item cure_confusion
Negates the effects of confusion when the player is confused.
@item lose_strength
Causes the player's strength stat to decrease.
@item lose_constitution
Causes the player's constitution stat to decrease.
@item restore_strength
Causes the player's strength stat to return to a normal level.
@item restore_constitution
Causes the player's constitution stat to return to a normal level.
@item restore_intelligence
Causes the player's intelligence stat to return to a normal level.
@item restore_wisdom
Causes the player's wisdom stat to return to a normal level.
@item restore_dexterity
Causes the player's dexterity stat to return to a normal level.
@item restore_charisma
Causes the player's charisma stat to return to a normal level.
@item cure_wounds_i
Restores a small number of the player's hit-points. 
@item cure_wounds_ii
Restores a medium number of the player's hit-points. 
@item cure_wounds_iii
Restores a large number of the player's hit-points. 
@item cure_wounds_iv
Restores a very large number of the player's hit-points. 
@item cause_wounds
Decreases the player's hit-points.
@end table

@item staff_casts
This attribute applies to objects that have a @samp{kind} of @samp{STAFF}.  Any one of the following values can be used:
@table @samp
@item light
Negates darkness in an open space.
@item detect_secret_doors
Shows secret doors that are located on the screen.
@item detect_traps
Shows traps that are located on the screen.
@item detect_treasures
Shows gold that is located on the screen.
@item detect_objects
Shows objects that are located on the screen.
@item teleport
Teleports the player elsewhere on the level.
@item earthquake
Rent the earth and collapse the ceiling.
@item summon_monster
Make a monster appear nearby.
@item earthquake_ii
Rent the earth and collapse the ceiling, in a larger radius.
@item starlight
Make a shaft of light appear in all directions.
@item speed_monsters
Make monsters on the screen move faster.
@item slow_monsters
Make monsters on the screen move slower.
@item sleep_monsters_ii
Make monsters on the screen go to sleep.
@item cure_wounds_i
Restore a small amount of the player's hit-points.
@item detect_invisible
Show invisible creatures that are located on the screen.
@item speed
Make the player go faster temporarily.
@item slowness
Make the player go slower temporarily.
@item mass_polymorph
Change the monsters on the screen to other other monsters.
@item remove_curse
Make a cursed item able to be taken off.
@item detect_evil
See the evil creatures that are located on the screen.
@item curing
Negate the affects of poison, blindness, and confusion.
@item dispel_undead
Attempt to utterly destroy an undead creature.
@item darkness
Turn out the lights!
@end table

@item wand_casts 
This attribute applies to objects that have a @samp{kind} of @samp{WAND}.  It can be one of the following values:
@table @samp
@item light_line
Make a shaft of light appear in a given direction.
@item lightning_bolt
Throws a lightning bolt at a target.
@item frost_bolt
Throws a magical arrow of ice in a given direction.
@item fire_bolt
Throws a magical arrow of fire in a given direction.
@item stone_to_mud
Dissolves walls and rock-based creatures in a given direction.
@item polymorph_monster
Changes a target creature into another creature.
@item heal_monster
Restores hit-points in the target creature.
@item haste_monster
Makes the target creature move faster.
@item slow_monster
Makes the target creature move slower.
@item confuse_monster
Makes the target creature move erradically.
@item sleep_monster
Makes the target creature go to sleep.
@item drain_life
Reduces experience from the target creature.
@item destroy_traps_and_doors
Makes targeted traps or doors disappear.
@item magic_missile
Throws a magical arrow in a given direction.
@item build_wall
Makes a line of walls in the given direction
@item clone_monster
Duplicates the target creature.
@item teleport_monster
Transport a target creature to another place on the level.
@item disarm_all
Disarms all chests and traps in a given direction.
@item lightning_ball
Throws a ball of lightning at a group of opponents.
@item cold_ball
Throws a ball of ice at a group of opponents.
@item fire_ball
Throws a ball of fire at a group of opponents.
@item poison_gas
Throws a ball of poison at a group of opponents.
@item acid_ball
Throws a ball of acid at a group of opponents.
@item wonder
This wand behaves randomly like a different wand.
@end table

@item scroll_casts 
This attribute applies to objects that have a @samp{kind} of @samp{SCROLL}.
@table @samp
@item increase_tohit
Attempts to increase a selected weapon's hit bonus.
@item increase_todam
Attempts to increase a selected weapon's damage bonus.
@item enchant_armor_i
Attempts to increase the armor class of a piece of armor.
@item identify
Assists the player in discovering the true nature of a selected object.
@item remove_curse
Makes it possible to take off a cursed object.
@item light
Negates darkness in an open space.
@item summon_monster
Make a monster appear nearby.
@item phase_door
Transport the player to a nearby location.
@item teleport
Causes the player to be randomly transported to another place on the map.
@item teleport_level
Causes the player to be randomly transported to another level of the dungeon.
@item confuse_monster
Makes the next creature the player hits move erradically.
@item magic_mapping
Shows the player the hidden walls on the screen.
@item sleep_monsters_i
This spell makes a group of creatures fall asleep.
@item warding_glyph
Leaves a 'Glyph' on the ground that creatures cann't pass over.  See the @samp{scare_monster} value of the @samp{unique_function} attribute for which object is dropped on the ground.
@item detect_treasure
Shows gold that is located on the screen.
@item detect_objects
Shows objects that are located on the screen.
@item detect_traps
Shows traps that are located on the screen.
@item detect_secret_doors
Shows secret doors that are located on the screen.
@item mass_genocide
Kills all creatures on the whole level except for the Balrog.
@item detect_invisble
Gives the player the ability see where invisible monsters are.
@item aggravate_monster
Causes the player to wake up monsters that are sleeping nearby.
@item create_trap
Creates a set of traps that enclose the player.
@item trap_or_door_destruction
Make traps and doors disappear.
@item create_door
Creates a set of doors enclosing the player.
@item recharge
Charge a staff or a wand.
@item genocide
Destroys all creatures of a given appearance on the level.
@item darkness
Turn out the lights.
@item protection_from_evil
Lessen the attacks of evil characters on the player.
@item create_food
This scroll creates food when it is read.  See the @samp{created_by_spell} value of the @samp{unique_function} attribute for which foodstuff is created.
@item dispel_undead
Attempts to utterly destroy an undead creature.
@item enchant_weapon
Attempts to enchant a weapon that the player is weilding.
@item curse_weapon
Curses a weapon the player is weilding.
@item enchant_armor_ii
Attempts to enchant armor that the player is wearing.
@item curse_armor
Curses armor the player is weilding.
@item summon_undead
Make an undead monster appear nearby.
@item bless_i
Improves ther player's armor class and fighting ability for a short period of time. 
@item bless_ii
Improves the player's armor class and fighting ability for a medium period of time. 
@item bless_iii
Improves the player's armor class and fighting ability for a long period of time. 
@item recall
Causes the player to be transported to the town if the player is in the dungeon.  If the player is already in the town, it causes the player to be transported into the dungeon -- to the deepest level the player has explored.  The recall effect does not happen immediately.
@item earthquake
Rents the earth and collapses the ceiling.
@end table
@item contains
This attribute applies to objects that have a @samp{kind} of @samp{CHEST}.  It can have any combination of the following values:
@table @samp
@item carry_small_obj
When this value is set, the chest will not carry @samp{CHEST}s, @samp{BOW}s, @samp{POLEARM}s, @samp{HARD_ARMOR}, @samp{SOFT_ARMOR}, or @samp{STAFF}s.  It will also not carry an object that is @samp{HAFTED}, is a @samp{SWORD} or @samp{DIGGING} utensil if weighs more than 15 stones.
@item carry_obj
When this value is set, the chest will carry any object that is found in the dungeon.
@item carry_gold
When this value is set the chest will carry some gold.
@item has_random_60
The chest contains objects 60% of the time.
@item has_random_90
The chest contains objects 90% of the time.
@item has_1d2_obj
The chest contains a minimum of 1 object, and a maximum of 2 objects.
@item has_2d2_obj
The chest contains a minimum of 2 objects, and a maximum of 4 objects.
@item has_4d2_obj
The chest contains a minimum of 4 objects, and a maximum of 8 objects.
@end table
@end table

@node Deriving Attributes, A Small Example, Attributes, The Treasure-Definition File
@section Deriving Attributes
Certain attributes behave differently when derived from a class.  Attributes can be overridden, merged, and negated.

Attributes like ac, level and cost only have one value, and their value is overwritten when they are derived from a class.  

For example:

@verbatim
class sword {
	ac: 0;
};

class maingauche : sword {
	ac: 1;
};
@end verbatim

This collection of classes results in @samp{ac} being 1, not 0.  The value of @samp{ac} is taken from @samp{sword} as 0, and then is replaced with 1.

Other attributes like special, spell, prayer, stackable, and unique_function have more than one value, and they are @emph{merged} when deriving.

For example:

@verbatim
class cursed {
	special: cursed;
};

class teleportable: cursed {
	special: teleport;
};

@end verbatim

This collection of classes results in treasure being @samp{teleport, cursed}.  It is easy to merge attributes in an unexpected fashion; the user must beware.

Through the practice of derivation, attributes can be merged that just don't go together.  Often there's a way to undo it, like by using the @samp{~} operator, or the @samp{none} value.  The compiler will try to complain when things don't make sense, but it doesn't catch all of the cases.  Here's an example that shows how to negate a flag:

@verbatim
class cursed {
	special: cursed;
};

class ring {
           kind: RING;
};

class weaknessring: cursed, ring {
	special: strength;
             p1: -5;
           cost: 0;
};

treasure "Strength" : weaknessring {
	special: ~cursed;
             p1: 0;
           cost: 500;
};
@end verbatim

This collection of classes results in the @samp{ring of Strength} having a @samp{special} of @samp{strength}.  The @samp{cursed} flag is dropped because of the @samp{~cursed} term.

@node A Small Example, Invoking tc, Deriving Attributes, Top
@chapter A Small Example
Let's take this treasure-definition file as an example.  It describes the skeleton objects.
@verbatim
class single_item {
	 quantity: 1;
};

class unwearable : single_item {
	  to_ac: 0; 	      ac: 0;
};

class unwieldable {
	 to_hit: 0; 	  to_dam: 0;
};

class worthless {
	   cost: 0;
};

class bone : unwearable, unwieldable, worthless {
           kind: MISC;	  letter: "s";	      p1: 0;    damage: 1|1;
      stackable: never;
};

treasure "& Human Skeleton" : bone {
	 weight: 60;       level: 1;
};

treasure "& Dwarf Skeleton" : bone {
	 weight: 50;       level: 1;
};

treasure "& Elf Skeleton" : bone {
	 weight: 40;       level: 1;
};

treasure "& Gnome Skeleton" : bone {
	 weight: 25;       level: 1;
};

treasure "& broken set of teeth" : bone {
	 weight: 3;       level: 0;
};

treasure "& large broken bone" : bone {
	 weight: 2;       level: 0;
};
@end verbatim


Seven treasures are derived from the @samp{bone} class.  They all hit for 1d1 when thrown, and cannot stack with other bones.  The @samp{bone} class is derived from the @samp{worthless} class which ensures that the intrinsic value of the object is zero.  Bones are @samp{unwieldable} and @samp{unwearable} so their ac and bonuses are always zero.  @samp{unwearable} things are always single objects.
When these bones are thrown, they hit an opponent with @samp{1d1} damage.

The resulting file that @emph{tc} outputs looks similar to this:

@verbatim

/* The following data was generated by the tc program. */

treasure_type object_list[MAX_OBJECTS] = {
{"& Elf Skeleton"               ,0x00000000L,      TV_MISC, 's',        /*  0*/
    0,     0,    0,   1,  40,   0,   0,  0,   0, {1,1}  ,  1},
{"& Dwarf Skeleton"             ,0x00000000L,      TV_MISC, 's',        /*  1*/
    0,     0,    1,   1,  50,   0,   0,  0,   0, {1,1}  ,  1},
{"& Gnome Skeleton"             ,0x00000000L,      TV_MISC, 's',        /*  2*/
    0,     0,    2,   1,  25,   0,   0,  0,   0, {1,1}  ,  1},
{"& Human Skeleton"             ,0x00000000L,      TV_MISC, 's',        /*  3*/
    0,     0,    3,   1,  60,   0,   0,  0,   0, {1,1}  ,  1},
{"& broken set of teeth"        ,0x00000000L,      TV_MISC, 's',        /*  4*/
    0,     0,    4,   1,   3,   0,   0,  0,   0, {1,1}  ,  0},
{"& large broken bone"          ,0x00000000L,      TV_MISC, 's',        /*  5*/
    0,     0,    5,   1,   2,   0,   0,  0,   0, {1,1}  ,  0},
};


@end verbatim

The note about bit-shifting in desc.c is confusing to beginners.  The moria codebase presumes bit shifting of the object ident offsets by 6 bits in desc.c because the range of subvals for objects that never stack is 63 (SINGLE_ITEM_STACK_MIN - 1).  It is also worth noting that changing OBJECT_IDENT_SIZE will break compatibility with the save game file.  This means that other versions of moria will not be able to read save game files with an OBJECT_IDENT_SIZE that is not 448.  
It is expected that users will create new variants of moria using this tool.  Should backwards comptability be desired then special care must be taken to ensure it.


@node Invoking tc, Consistency Checks, A Small Example, Top
@chapter Invoking @command{moria-tc}
@cindex invoking
@cindex version
@cindex options
@cindex usage
@cindex help
@cindex getting help

This is the output of the command @samp{tc --help}:
@noindent
@verbatiminclude usage
@verbatim
@end verbatim

@code{FILE} is the treasure-defintion file to "compile".  If it is "-", then it will be read from the standard input.

@code{tc} supports the following options:

@c Formatting copied from the Texinfo 4.0 manual.
@table @code
@item -o
@itemx --outputfile
Put generated code into FILE.
This option puts the generated treasure_tables.c file into a specific FILE.  If FILE is "-", then it will go to the standard output.  This is the default.
@item -c
@itemx --consistency-check
Check for consistency errors.
A loose set of rules is applied to treasures in the treasure-definition file.
For example, if a book doesn't contain any spells, it complains.  See the section on Consistency Checks for more information.
@item -C
@itemx --constants
Generate constants instead of tables.
This option makes @command{moria-tc} generate the treasure_constant.h file instead of the treasure_tables.c file.
@end table
@menu
* Consistency Checks::		The rules that are applied during -c.
@end menu

@node Consistency Checks, Workflow, Invoking tc, Invoking tc
@section Consistency Checks

The following consistency checks are implemented:
@enumerate
@item
When a treasure is a @samp{STAFF}, then it must have a @samp{staff_casts} attribute specified.
@item
When a treasure is a @samp{MUSHROOM}, then it must have an @samp{eating_causes} attribute specified.
@item
When a treasure is a @samp{WAND}, then it must have a @samp{wand_casts} attribute specified.
@item
When a treasure is a @samp{SCROLL}, then it must have a @samp{scroll_casts} attribute specified.
@item
If a treasure is a @samp{MAGIC_BOOK}, then it must have a @samp{spell} attribute specified to denote which spells the book contains.
@item
If a treasure is a @samp{PRAYER_BOOK}, then it must have a @samp{prayer} attribute specified to denote which prayers the book contains.
@item
When a treasure is a @samp{GOLD}, then it must have a @samp{cost} attribute that exceeds zero.
@item
When a treasure is a @samp{FOOD}, then it must have a @samp{p1} attribute that exceeds zero to represent the food's ability to prevent hunger.
@item
All treasures except ones that are @samp{NOTHING} must have a @samp{quantity} over zero.
@item
Treasures that are @samp{SOFT_ARMOR}, @samp{HARD_ARMOR}, @samp{BOOTS} and @samp{GLOVES} must have an @samp{ac} over zero.
@item
All treasures must have a @samp{weight} over zero, except for those that are door related, trap related, @samp{RUBBLE}, @samp{GOLD}, or @samp{NOTHING}.
@item
@samp{SWORD}, @samp{HAFTED}, and @samp{POLEARM} objects must have a @samp{damage} of at least @samp{1d1}.
@end enumerate

@node Workflow, Contributors, Consistency Checks, Top
@chapter Workflow

@command{moria-tc} will typically be used in this fashion:

@enumerate
@item
start a new treasure-definition file
@item
add and modify treasure and class blocks
@item
run @command{moria-tc} on the new treasure-definition file
@item
check for warning and errors, goto 2 if there are any
@item
replace the src/treasure_tables.c file in the gmoria source tree with the resulting treasure_tables.c file
mitem
re-run @command{moria-tc} on the same treasure-definition file but this time with the --constant option
@item
replace the src/treasure_constant.h file in the gmoria source tree with the resulting treasure_constant.h file
@item
recompile gmoria by typing `make' in the top level directory
@end enumerate

@node Contributors, Problems, Workflow, Top
@chapter Contributors

The following persons have contributed to this software:

@itemize
@item Joseph Hall
@item Ben Asselstine
@end itemize

@node Problems, , Contributors, Top
@chapter Reporting Bugs
@cindex bugs
@cindex problems

If a bug is found in @command{moria-tc}, please send electronic mail to
@email{gmoria@@nym.hush.com}.  Include the version number, which can be found by running @w{@samp{tc --version}}.  Also include in the output that the program produced and the expected output.@refill

Send questions, comments or suggestions about
@command{moria-tc}, to @email{gmoria@@nym.hush.com}.

@bye
